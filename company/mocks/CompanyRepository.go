// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/thiagotrennepohl/business-catalog/models"

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// Bulk provides a mock function with given fields: _a0
func (_m *CompanyRepository) Bulk(_a0 []models.Company) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Company) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *CompanyRepository) Find(_a0 string, _a1 int) ([]models.Company, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func(string, int) []models.Company); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *CompanyRepository) Save(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
