// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import csv "encoding/csv"
import mock "github.com/stretchr/testify/mock"
import models "github.com/thiagotrennepohl/business-catalog/models"

// CompanyUseCase is an autogenerated mock type for the CompanyUseCase type
type CompanyUseCase struct {
	mock.Mock
}

// Find provides a mock function with given fields: name, zip
func (_m *CompanyUseCase) Find(name string, zip int) ([]models.Company, error) {
	ret := _m.Called(name, zip)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func(string, int) []models.Company); ok {
		r0 = rf(name, zip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(name, zip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseHeaders provides a mock function with given fields: _a0
func (_m *CompanyUseCase) ParseHeaders(_a0 *csv.Reader) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*csv.Reader) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*csv.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadCsvFile provides a mock function with given fields: _a0
func (_m *CompanyUseCase) ReadCsvFile(_a0 string) (*csv.Reader, error) {
	ret := _m.Called(_a0)

	var r0 *csv.Reader
	if rf, ok := ret.Get(0).(func(string) *csv.Reader); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csv.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transform provides a mock function with given fields: _a0, _a1
func (_m *CompanyUseCase) Transform(_a0 *csv.Reader, _a1 []string) ([]models.Company, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func(*csv.Reader, []string) []models.Company); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*csv.Reader, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManyCompanies provides a mock function with given fields: companies
func (_m *CompanyUseCase) UpdateManyCompanies(companies []models.Company) error {
	ret := _m.Called(companies)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Company) error); ok {
		r0 = rf(companies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
